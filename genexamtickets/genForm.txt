void MainWindow::generateTickets()
{
    delete genWidgetFirst;

    genWidgetFirst = new QWidget(this, Qt:: Dialog | Qt::WindowMinMaxButtonsHint | Qt::WindowCloseButtonHint);
    genWidgetFirst->setMinimumSize(400, 300);
    genWidgetFirst->setWindowTitle("Генерация. Базовая настройка");

    QSqlQueryModel *discModel = new QSqlQueryModel();
    QSqlQueryModel *depModel = new QSqlQueryModel();
    discModel->setQuery("select discName from Disc");
    depModel->setQuery("select depName from Dep");
    QLabel *discLabel = new QLabel("Дисциплина");
    QLabel *depLabel = new QLabel("Кафедра");
    QLabel *nameLabel = new QLabel("Название списка билетов");
    QLabel *countLabel = new QLabel("Количество билетов");
    QLabel *complexityLabel = new QLabel("Выравнивание по сложности");
    QLabel *topicLabel = new QLabel("Выравнивание по теме");

    discCombo = new QComboBox();
    discCombo->setModel(discModel);
    //discCombo->setModelColumn(1);
    depCombo = new QComboBox();
    depCombo->setModel(depModel);
    //depCombo->setModelColumn(1);

    QLineEdit *name = new QLineEdit();
    QLineEdit *count = new QLineEdit("");
    count->setValidator(new QIntValidator(1, 999));

    QCheckBox *complexity = new QCheckBox();
    QCheckBox *topic = new QCheckBox();

    QHBoxLayout* h1 = new QHBoxLayout();
    h1->addWidget(countLabel);
    h1->addWidget(count);
    QHBoxLayout* h2 = new QHBoxLayout();
    h2->addWidget(complexityLabel);
    h2->addWidget(complexity);
    QHBoxLayout* h3 = new QHBoxLayout();
    h3->addWidget(topicLabel);
    h3->addWidget(topic);

    int idDep = 0;
    int idDisc = 0;

    QPushButton *next = new QPushButton("Далее");
    QPushButton *cancel = new QPushButton("Отмена");
    connect(next, &QPushButton::clicked, this, [this, name, idDep ,idDisc, count](){emit
        generateTicketsSecondForm(name, idDep, idDisc, count);
    });
    connect(cancel, &QPushButton::clicked, genWidgetFirst, &QWidget::close);
    QHBoxLayout* h4 = new QHBoxLayout();
    h4->addWidget(next);
    h4->addWidget(cancel);

    wLayout = new QVBoxLayout();
    wLayout->addWidget(nameLabel);
    wLayout->addWidget(name);
    wLayout->addWidget(discLabel);
    wLayout->addWidget(discCombo);
    wLayout->addWidget(depLabel);
    wLayout->addWidget(depCombo);
    wLayout->addLayout(h1);
    wLayout->addLayout(h2);
    wLayout->addLayout(h3);
    wLayout->addSpacing(20);
    wLayout->addLayout(h4);

    genWidgetFirst->setLayout(wLayout);
    genWidgetFirst->setWindowModality(Qt::WindowModal);
    genWidgetFirst->show();

//    QSqlQueryModel *model = new QSqlQueryModel(this);
//    int index = discCombo->currentIndex();
//    cout << index << endl;
//    model->setQuery("select * from Disc where discName = " + discCombo->currentText() + "");
//    int idDisc2 = model->record(index).field("discID").value().toInt();
//    cout << idDisc2 << endl;
}

void MainWindow::generateTicketsSecondForm(QLineEdit *name, int idDep, int idDisc, QLineEdit *count)
{
    QSqlQueryModel *Department_SUB = new QSqlQueryModel(0);
    Department_SUB->setQuery("select * from Dep where depName = '" + depCombo->currentText() + "'");
    int id = Department_SUB->record(depCombo->currentIndex()).field("depID").value().toInt();

    //genWidgetFirst->close();

    QMessageBox msg;
    msg.setText("Процесс генерация экзаменационных билетов! \n" + QString::number(id));
    msg.setStandardButtons(QMessageBox::Close);
    msg.setWindowTitle("Список билетов " + depCombo->currentText());
    msg.setIcon(QMessageBox::Information);
    msg.exec();
}